@page "/auth"
@layout UserLayout
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudPopoverProvider></MudPopoverProvider>
<MudDialogProvider></MudDialogProvider>
<PageTitle>Auth</PageTitle>

<AuthorizeView>
    <MudText Typo="Typo.h4">Welcome, @context.User.Identity?.Name!</MudText>
    <br />
    <MudContainer MaxWidth="MaxWidth.Large">
        <div style="position: relative; width: 100%">
            <MudStack Row="true" Class="width-100">
                <MudText Typo="Typo.h4"
                         Style="color: #4682b4; position: absolute; left: 50%; transform: translateX(-50%); width: auto;"
                         Class="text-center">
                    Scheduled Appointments
                </MudText>
                <div style="margin-left: auto;">
                    <MudButton Style="background-color: #4682b4; color: white"
                               Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="ScheduleNewAppointment">
                        Schedule Appointment
                    </MudButton>
                </div>
            </MudStack>
        </div>
        <br />
        <AppointmentsTable Appointments="@appointments" OnAppointmentDeleted="HandleAppointmentDeleted" />
    </MudContainer>
</AuthorizeView>

@code {
    private List<Appointment> appointments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();
    }

    private async Task LoadAppointments()
    {
        appointments = await _appointmentsRepository.GetByUserIdAsync(1);
        StateHasChanged();
    }

    private async Task HandleAppointmentDeleted(int appointmentId)
    {
        appointments.RemoveAll(a => a.Id == appointmentId);
        StateHasChanged();
    }

    private async Task ScheduleNewAppointment()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<CreateUpdateAppointmentDialog>("Schedule New Appointment", options).Result;

        if (!result.Canceled)
        {
            var newAppointmentModel = (CreateUpdateAppointmentDialog.AppointmentModel)result.Data;
            var appointmentToAdd = new Appointment
                {
                    UserId = 1,
                    AppointmentDate = DateOnly.FromDateTime(newAppointmentModel.AppointmentDate.Value),
                    AppointmentTime = DateTime.Now.Date.Add(newAppointmentModel.AppointmentTime.Value),
                    Reason = newAppointmentModel.Reason
                };

            var addedAppointment = await _appointmentsRepository.Add(appointmentToAdd);
            if (addedAppointment != null)
            {
                appointments.Add(addedAppointment);
                StateHasChanged();
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("Appointment successfully scheduled!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to schedule appointment.", Severity.Error);
            }
        }
    }
}
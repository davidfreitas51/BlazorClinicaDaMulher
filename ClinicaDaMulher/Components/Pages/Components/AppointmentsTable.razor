@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudSnackbarProvider />
@if (Appointments.Count == 0)
{
    <MudText Typo="Typo.h6" Align="Align.Center">You have no scheduled appointments</MudText>
}
else
{
    <MudTable Items="@Appointments" Hover="true" SortLabel="Sort By">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Appointment, object>(x=>x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Appointment, object>(x=>x.UserId)">User ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Appointment, object>(x=>x.AppointmentDate)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Appointment, object>(x=>x.AppointmentTime)">Time</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Appointment, object>(x=>x.Reason)">Reason</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate Context="model">
            <MudTd DataLabel="ID">@model.Id</MudTd>
            <MudTd DataLabel="User ID">@model.UserId</MudTd>
            <MudTd DataLabel="Date">@model.AppointmentDate</MudTd>
            <MudTd DataLabel="Time">@model.AppointmentTime.ToShortTimeString()</MudTd>
            <MudTd DataLabel="Reason">@model.Reason</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Style="color: #4682b4" Size="Size.Small" OnClick="() => EditAppointment(model)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="() => DeleteAppointment(model.Id)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
}

@code {
    [Parameter]
    public List<Appointment> Appointments { get; set; } = new();

    [Parameter]
    public EventCallback<int> OnAppointmentDeleted { get; set; }

    private async Task EditAppointment(Appointment appointment)
    {
        AppointmentModel model = new AppointmentModel
            {
                AppointmentDate = DateTime.Now,
                AppointmentTime = System.TimeSpan.FromHours(9),
                Reason = appointment.Reason
            };

        var parameters = new DialogParameters
        {
            { "Title", "Update Appointment" },
            { "model", model }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<CreateUpdateAppointmentDialog>("Dialog", parameters, options).Result;

        if (!result.Canceled)
        {
            var updatedModel = result.Data as AppointmentModel;

            appointment.AppointmentDate = DateOnly.FromDateTime(updatedModel.AppointmentDate.Value);
            appointment.AppointmentTime = DateTime.Now;
            appointment.Reason = updatedModel.Reason;
        }

        var success = await _appointmentsRepository.UpdateAsync(appointment);

        if (success)
        {
            // Reflect the changes in the UI
            var index = Appointments.FindIndex(a => a.Id == appointment.Id);
            if (index != -1)
            {
                Appointments[index] = appointment;
                StateHasChanged();
            }

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Add("Appointment successfully updated!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to update appointment.", Severity.Error);
        }
    }

    private async Task DeleteAppointment(int appointmentId)
    {
        var parameters = new DialogParameters
        {
            { "Title", "Confirmation" },
            { "Message", "Are you sure you want to delete this appointment?" }
        };

        var result = await DialogService.Show<ConfirmationDialog>("", parameters).Result;
        if (!result.Canceled)
        {
            var success = await _appointmentsRepository.DeleteAsync(appointmentId);
            if (success)
            {
                await OnAppointmentDeleted.InvokeAsync(appointmentId);
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("Appointment successfully deleted!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to delete appointment.", Severity.Error);
            }
        }
    }
}